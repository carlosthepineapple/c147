# @package _global_
to_tensor:
  _target_: emg2qwerty.transforms.ToTensor
  fields: [emg_left, emg_right]

band_rotation:
  _target_: emg2qwerty.transforms.ForEach  # i.i.d rotation offset for each band
  transform:
    _target_: emg2qwerty.transforms.RandomBandRotation
    offsets: [-1, 0, 1]

temporal_jitter:
  _target_: emg2qwerty.transforms.TemporalAlignmentJitter
  max_offset: 120  # Max 60ms jitter for 2kHz EMG

logspec:
  _target_: emg2qwerty.transforms.LogSpectrogram
  n_fft: 64
  hop_length: 16  # Downsamples from 2kHz to 125Hz

specaug:
  _target_: emg2qwerty.transforms.SpecAugment
  n_time_masks: 3
  time_mask_param: 25  # Max 200ms per time mask for 125Hz spectrogram
  n_freq_masks: 2
  freq_mask_param: 4


random_crop:
  _target_: emg2qwerty.transforms.RandomCrop
  min_crop_size: 5000
  max_crop_size: 9000

gaussian_noise:
  _target_: emg2qwerty.transforms.GaussianNoise
  mean: 0.0
  std: 0.001
  apply_prob: 0.9

ensure_valid_t_dim:
  _target_: emg2qwerty.transforms.EnsureValidTDim
  n_fft: 64  # fix dim before fft - need for debug

smooth:
  _target_: emg2qwerty.transforms.Smooth
  downsample_factor: 4
  mode: "linear"

transforms:
  train:
    - ${to_tensor}
    - ${smooth}    # add blurring effect
    - ${random_crop}  # augment data by also cropping 
    - ${band_rotation}
    - ${temporal_jitter}
    - ${logspec}
    - ${specaug}
    - ${gaussian_noise} # add noise, should help regularisation



transforms:
  train:
    - ${to_tensor}
    - ${random_crop}
    - ${ensure_valid_t_dim}  
    - ${band_rotation}
    - ${temporal_jitter}
    - ${logspec}
    - ${specaug}
    - ${gaussian_noise}


  val:
    - ${to_tensor}
    - ${logspec}

  test: ${transforms.val}
